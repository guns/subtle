# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.5.9)
AC_INIT(subtle, 0.7-r326, unexist@hilflos.org)
AC_CONFIG_SRCDIR([src/main.c])
AC_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(no-define)
AM_MAINTAINER_MODE

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_AWK
PKG_PROG_PKG_CONFIG(0.1)

# Checks for header files.
AC_PATH_X
AC_PATH_XTRA
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([limits.h malloc.h memory.h sys/time.h unistd.h fnmatch.h sys/inotify.h regex.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_HEADER_TIME
AC_STRUCT_TM

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_STRFTIME
AC_CHECK_FUNCS([memmove memset select strchr strdup strerror strrchr])

# Paths
AC_PREFIX_DEFAULT([/usr/local])
test "$prefix" = "NONE" && prefix=$ac_default_prefix

AC_DEFUN([AC_DEFINE_DIR], [
  prefix_NONE=
  exec_prefix_NONE=
  test "x$prefix" = xNONE && prefix_NONE=yes && prefix=$ac_default_prefix
  test "x$exec_prefix" = xNONE && exec_prefix_NONE=yes && exec_prefix=$prefix
  eval ac_define_dir="\"[$]$2\""
  eval ac_define_dir="\"$ac_define_dir\""
  AC_SUBST($1, "$ac_define_dir")
  AC_DEFINE_UNQUOTED($1, "$ac_define_dir", [$3])
  test "$prefix_NONE" && prefix=NONE
  test "$exec_prefix_NONE" && exec_prefix=NONE
])

CONFIG_DIR=`eval echo $sysconfdir/$PACKAGE_NAME`
SUBLET_DIR=`eval echo $datadir/$PACKAGE_NAME`

AC_DEFINE_DIR(CONFIG_DIR, CONFIG_DIR, [Directory for configuration files])
AC_DEFINE_DIR(SUBLET_DIR, SUBLET_DIR, [Directory for sublets])

# Configure switches
AC_ARG_ENABLE(debug, [  --enable-debug   Enable debugging support], debug="$enableval")
AM_CONDITIONAL(DEBUG, test "x$debug" = "xyes")

DEBUG_CFLAGS=""

if test "x$debug" = "xyes"; then
	AC_DEFINE(DEBUG, 1, [Define to 1 if you want debugging support])
	DEBUG_CFLAGS="-g"
else
	AC_DEFINE(DEBUG, 0, [Define to 1 if you want debugging support])
	AC_DEFINE(NODEBUG, 1, [Define to 1 if you want no debugging support])
	debug="no"
fi

AC_SUBST(DEBUG_CFLAGS)

# Check for X11
if test "x$no_x" = "xyes"; then
  AC_MSG_ERROR([The X Window System libraries and headers are required.])
fi
	
CFLAGS="$CFLAGS $X_CFLAGS"
LIBS="$LIBS $X_LIBS -ldl"
LDFLAGS="$LDFLAGS $LIBS $X_PRE_LIBS"

# Check for functions in X11
AC_CHECK_LIB(X11, XOpenDisplay,
  LIBS="$LIBS -lX11",
  AC_MSG_ERROR([Could not find XOpenDisplay in -lX11.])
)

# FIXME: Check for Lua support
# Due the change of the name with every new version
# we need to bruteforce the _real_ name of the lib.
AC_MSG_CHECKING([for Lua pkg-config names])
lua_name=`pkg-config --list-all | grep "^lua" | awk '{print $1}' | tr '\n' ' '`
if test -z "$lua_name" ; then
	AC_MSG_RESULT([not found])
	AC_MSG_ERROR([Lua library and header >= 5.1 are required.])
fi
AC_MSG_RESULT($lua_name)

# Try every result
AC_MSG_CHECKING([names for required Lua version (>=5.1)])
for l in $lua_name; do
	if pkg-config $l --atleast-version=5.1; then
		LUA_CFLAGS=`pkg-config $l --cflags`
		LUA_LIBS=`pkg-config $l --libs`
		AC_MSG_RESULT([$l])
		break
	fi
done

if test -z "$LUA_CFLAGS" ; then
	AC_MSG_RESULT([error])
	AC_MSG_ERROR([Lua library and header >= 5.1 are required.])
fi

AC_SUBST(LUA_CFLAGS)
AC_SUBST(LUA_LIBS)

# Outout
AC_OUTPUT([
	Makefile
	src/Makefile
	sublets/Makefile
	config/Makefile]
)

echo
echo $PACKAGE_STRING
echo -----------------
echo Install path........: ${prefix}
echo Binary..............: ${prefix}/bin
echo Configuration.......: ${CONFIG_DIR}
echo Sublets.............: ${SUBLET_DIR}
echo
echo Debugging messages..: ${debug}
echo
echo Try 'make' now, good luck!
echo
